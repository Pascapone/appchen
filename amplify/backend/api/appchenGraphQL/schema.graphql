type User @model @auth(rules: [
    { allow: private, provider: iam, operations: [create, update, delete, read] },
    { allow: groups, groups: ["admin", "superAdmin"], operations: [create, update, delete, read] }
    { allow: groups, groups: ["default"], operations: [read] },
  ]) {
  id: ID!
  name: String!
  email: String!
  userType: UserType!
  courses: [Course] @manyToMany(relationName: "CoursesUsers")
  ownedCourses: [Course] @hasMany(indexName: "byUser", fields: ["id"])
  textAssignmentsUser: [TextAssignmentUser] @hasMany(indexName: "byUser", fields: ["id"])
  ownedTextAssignments: [TextAssignment] @hasMany(indexName: "byUser", fields: ["id"])
}

type Course @model @auth(rules: [
    { allow: private, provider: iam, operations: [create, update, delete, read] },
    { allow: groups, groups: ["admin", "superAdmin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["default"], operations: [read] },
  ]) {
  id: ID!
  name: String!
  level: Level!
  ownerId: ID! @index(name: "byUser")
  ownerName: String!
  owner: User! @belongsTo(fields: ["ownerId"])
  inviteToken: String
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  users: [User] @manyToMany(relationName: "CoursesUsers")
  textAssignments: [TextAssignmentCourse] @hasMany(indexName: "byCourse", fields: ["id"]) # This will not be added to model. It uses index to get the data
}


# ------------- Text Assignment ------------- #
# ------------------------------------------- #
type TextAssignment @model @auth(rules: [
    { allow: private, provider: iam, operations: [create, update, delete, read] },
    { allow: groups, groups: ["admin", "superAdmin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["default"], operations: [read] },
  ]) {
  id: ID!

  ownerId: ID! @index(name: "byUser")
  owner: User! @belongsTo(fields: ["ownerId"])

  name: String!
  description: String!
  link: AWSURL! # link to the pdf
  level: Level! # level of the text
  timeLimit: AWSTime! # time limit for the assignment
}

type TextAssignmentCourse @model @auth(rules: [
    { allow: private, provider: iam, operations: [create, update, delete, read] },
    { allow: groups, groups: ["admin", "superAdmin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["default"], operations: [read] },
  ]) {
  id: ID!

  courseId: ID! @index(name: "byCourse")
  course: Course! @belongsTo(fields: ["courseId"])

  textAssignmentId: ID!
  textAssignment: TextAssignment! @hasOne(fields: ["textAssignmentId"])

  textAssignmentUsers: [TextAssignmentUser] @hasMany(indexName: "byTextAssignmentCourse", fields: ["id"])

  dueDate: AWSDateTime # due date for the assignment
  timeLimit: AWSTime
}

type TextAssignmentUser @model @auth(rules: [
    { allow: private, provider: iam, operations: [create, update, delete, read] },
    { allow: groups, groups: ["admin", "superAdmin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["default"], operations: [read] },
  ]) {  
  id: ID!  

  textAssignmentId: ID!
  textAssignment: TextAssignment! @hasOne(fields: ["textAssignmentId"])

  userId: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userId"])

  textAssignmentCourseId: ID @index(name: "byTextAssignmentCourse")
  textAssignmentCourse: TextAssignmentCourse @belongsTo(fields: ["textAssignmentCourseId"])

  submission: String
  revision: String
  
  startTime: AWSDateTime
  endTime: AWSDateTime
  submissionTime: AWSDateTime
}


# ------------------ Enums ------------------ #
# ------------------------------------------- #
enum Level {
  A11
  A12
  A21
  A22
  B11
  B12
  B21
  B22
  C1
}

enum UserType {
  STUDENT
  TEACHER
}